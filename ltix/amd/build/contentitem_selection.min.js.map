{"version":3,"file":"contentitem_selection.min.js","sources":["../src/contentitem_selection.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base class for defining a content item selection request to an LTI tool provider that supports Content-Item type messages.\n *\n * @module     core_ltix/contentitem_selection\n * @copyright  2024 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      5.0\n */\n\nimport Notification from 'core/notification';\nimport {getString} from 'core/str';\nimport Templates from 'core/templates';\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\nimport Url from 'core/url';\n\n/** @constant {Object} The object containing the relevant selectors. */\nconst Selectors = {\n    loadingContainer: '.contentitem-loading-container',\n    failedContainer: '#tool-loading-failed',\n    iframe: '#contentitem-page-iframe',\n    requestForm: '#contentitem-request-form',\n    mainContainer: 'div.contentitem-container'\n};\n\nexport default class ContentItemSelection {\n\n    /** @property {int|null} toolID The tool ID. */\n    toolID = null;\n\n    /** @property {int|null} contextID The context ID. */\n    contextID = null;\n\n    /** @property {string|null} placementType The placement class information. */\n    placementType = null;\n\n    /** @property {string|null} defaultTitle Default title to pass to the tool inside the deep_linking_settings claim. */\n    defaultTitle = null;\n\n    /** @property {string|null} defaultText Default text to pass to the tool inside the deep_linking_settings claim. */\n    defaultText = null;\n\n    /** @property {Object|null} modal The modal object. */\n    modal = null;\n\n    /**\n     * Initializes the content item selection process.\n     *\n     * @param {int} toolID The tool ID.\n     * @param {int} contextID The context ID.\n     * @param {string} placementType The placement class information.\n     * @param {string|null} defaultTitle Default title to pass to the tool inside the deep_linking_settings claim.\n     * @param {string|null} defaultText Default text to pass to the tool inside the deep_linking_settings claim.\n     * @returns {void}\n     */\n    static async init(toolID, contextID, placementType, defaultTitle = null, defaultText = null) {\n        const contentItem = new this(toolID, contextID, placementType, defaultTitle, defaultText);\n        contentItem.registerEventListeners();\n    }\n\n    /**\n     * The class constructor.\n     *\n     * @param {int} toolID The tool ID.\n     * @param {int} contextID The context ID.\n     * @param {string} placementType The placement class information.\n     * @param {string|null} defaultTitle Default title to pass to the tool inside the deep_linking_settings claim.\n     * @param {string|null} defaultText Default text to pass to the tool inside the deep_linking_settings claim.\n     * @returns {void}\n     */\n    constructor(toolID, contextID, placementType, defaultTitle = null, defaultText = null) {\n        this.toolID = toolID;\n        this.contextID = contextID;\n        this.placementType = placementType;\n        this.defaultTitle = defaultTitle;\n        this.defaultText = defaultText;\n    }\n\n    /**\n     * Registers the listener events for the content item selection.\n     *\n     * @returns {void}\n     */\n    registerEventListeners() {\n        document.addEventListener('click', async (e) => {\n            // Content item selection request has been initiated.\n            if (e.target.closest(this.getContentItemTriggerSelector())) {\n                e.preventDefault();\n                // After initiating the content selection request, store the class object in the global scope.\n                // This ensures it remains accessible later within the content item selection iframe.\n                // Storing the object globally each time a request is initiated guarantees that the correct\n                // instance is available to execute the appropriate logic in processContentItemReturnData()\n                // for processing the returned data.\n                globalThis['contentItem'] = this;\n                this.customContentItemTriggerActions();\n                this.modal = await this.showModal();\n                this.submitForm();\n            }\n        });\n    }\n\n    /**\n     * Shows the content item selection modal.\n     *\n     * @returns {Promise} The modal promise.\n     */\n    async showModal() {\n        const modal = await Modal.create({\n            title: await getString('selectcontent', 'lti'),\n            body: await this.renderModalBody(),\n            large: true,\n        });\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            modal.destroy();\n            // Fetch notifications.\n            Notification.fetchNotifications();\n        });\n\n        modal.show();\n\n        return modal;\n    }\n\n    /**\n     * Renders the content item selection modal body.\n     *\n     * @returns {Promise} The modal body promise.\n     */\n    async renderModalBody() {\n        var context = {\n            url: Url.relativeUrl('/ltix/contentitemselection.php'),\n            postData: {\n                toolid: this.toolID,\n                contextid: this.contextID,\n                placementtype: this.placementType,\n                defaulttitle: this.defaultTitle,\n                defaulttext: this.defaultText\n            }\n        };\n\n        return Templates.render('core_ltix/contentitem_selection', context);\n    }\n\n    /**\n     * Auto-submits the content item selection request form to contentitem.php followed by rendering the content in\n     * the iframe.\n     *\n     * @returns {void}\n     */\n    submitForm() {\n        const modalRoot = this.modal.getRoot()[0];\n\n        setTimeout(() => {\n            const failedContainer = modalRoot.querySelector(Selectors.failedContainer);\n            failedContainer.classList.remove('hidden');\n        }, 20000);\n\n        // Submit the form.\n        modalRoot.querySelector(Selectors.requestForm).submit();\n\n        const iframe = modalRoot.querySelector(Selectors.iframe);\n        iframe.addEventListener('load', () => {\n            const loadingContainer = modalRoot.querySelector(Selectors.loadingContainer);\n            loadingContainer.classList.add('hidden');\n            iframe.classList.remove('hidden');\n\n            // Adjust iframe's width to fit the container's width.\n            const containerWidth = modalRoot.querySelector(Selectors.mainContainer).offsetWidth;\n            iframe.style.width = `${containerWidth}px`;\n\n            // Adjust iframe's height to 75% of the width.\n            const containerHeight = containerWidth * 0.75;\n            modalRoot.querySelector(Selectors.iframe).style.height = `${containerHeight}px`;\n        });\n    }\n\n    /**\n     * Defines the action that occurs right after the content item selection data is returned.\n     *\n     * @param {string} returnData The returned data.\n     * @returns {void}\n     */\n    contentItemReturnAction(returnData) {\n        if (this.modal) {\n            this.modal.hide();\n        }\n        // Process the content item return data.\n        this.processContentItemReturnData(returnData);\n    }\n\n    /**\n     * Defines any custom actions that will occur right after initiating the content item selection request.\n     *\n     * @returns {void}\n     */\n    customContentItemTriggerActions() {\n        return;\n    }\n\n    /**\n     * Defines the selector of the element that initiates the content item selection request.\n     *\n     * @returns {string} The selector.\n     */\n    getContentItemTriggerSelector() {\n        throw new Error(`getContentItemTriggerSelector() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Defines the logic for processing the content item return data.\n     *\n     * @param {string} returnData The returned data.\n     * @returns {void}\n     */\n    processContentItemReturnData(returnData) {\n        throw new Error(`processContentItemReturnData(${returnData}) must be implemented in ${this.constructor.name}`);\n    }\n}\n"],"names":["Selectors","toolID","contextID","placementType","this","registerEventListeners","constructor","defaultTitle","defaultText","document","addEventListener","async","e","target","closest","getContentItemTriggerSelector","preventDefault","globalThis","customContentItemTriggerActions","modal","showModal","submitForm","Modal","create","title","body","renderModalBody","large","getRoot","on","ModalEvents","hidden","destroy","fetchNotifications","show","context","url","Url","relativeUrl","postData","toolid","contextid","placementtype","defaulttitle","defaulttext","Templates","render","modalRoot","setTimeout","querySelector","classList","remove","submit","iframe","add","containerWidth","offsetWidth","style","width","containerHeight","height","contentItemReturnAction","returnData","hide","processContentItemReturnData","Error","name"],"mappings":"uwBAgCMA,2BACgB,iCADhBA,0BAEe,uBAFfA,iBAGM,2BAHNA,sBAIW,4BAJXA,wBAKa,4EAiCGC,OAAQC,UAAWC,eACb,IAAIC,KAAKH,OAAQC,UAAWC,qEADe,4DAAoB,MAEvEE,yBAahBC,YAAYL,OAAQC,UAAWC,mBAAeI,oEAAe,KAAMC,mEAAc,mCA1CxE,uCAGG,2CAGI,0CAGD,yCAGD,mCAGN,WA4BCP,OAASA,YACTC,UAAYA,eACZC,cAAgBA,mBAChBI,aAAeA,kBACfC,YAAcA,YAQvBH,yBACII,SAASC,iBAAiB,SAASC,MAAAA,IAE3BC,EAAEC,OAAOC,QAAQV,KAAKW,mCACtBH,EAAEI,iBAMFC,WAAU,YAAkBb,UACvBc,uCACAC,YAAcf,KAAKgB,iBACnBC,yCAWPF,YAAcG,eAAMC,OAAO,CAC7BC,YAAa,kBAAU,gBAAiB,OACxCC,WAAYrB,KAAKsB,kBACjBC,OAAO,WAIXR,MAAMS,UAAUC,GAAGC,sBAAYC,QAAQ,KACnCZ,MAAMa,gCAEOC,wBAGjBd,MAAMe,OAECf,kCASHgB,QAAU,CACVC,IAAKC,aAAIC,YAAY,kCACrBC,SAAU,CACNC,OAAQpC,KAAKH,OACbwC,UAAWrC,KAAKF,UAChBwC,cAAetC,KAAKD,cACpBwC,aAAcvC,KAAKG,aACnBqC,YAAaxC,KAAKI,qBAInBqC,mBAAUC,OAAO,kCAAmCX,SAS/Dd,mBACU0B,UAAY3C,KAAKe,MAAMS,UAAU,GAEvCoB,YAAW,KACiBD,UAAUE,cAAcjD,2BAChCkD,UAAUC,OAAO,YAClC,KAGHJ,UAAUE,cAAcjD,uBAAuBoD,eAEzCC,OAASN,UAAUE,cAAcjD,kBACvCqD,OAAO3C,iBAAiB,QAAQ,KACHqC,UAAUE,cAAcjD,4BAChCkD,UAAUI,IAAI,UAC/BD,OAAOH,UAAUC,OAAO,gBAGlBI,eAAiBR,UAAUE,cAAcjD,yBAAyBwD,YACxEH,OAAOI,MAAMC,gBAAWH,2BAGlBI,gBAAmC,IAAjBJ,eACxBR,UAAUE,cAAcjD,kBAAkByD,MAAMG,iBAAYD,yBAUpEE,wBAAwBC,YAChB1D,KAAKe,YACAA,MAAM4C,YAGVC,6BAA6BF,YAQtC5C,mCASAH,sCACU,IAAIkD,uEAAgE7D,KAAKE,YAAY4D,OAS/FF,6BAA6BF,kBACnB,IAAIG,6CAAsCH,+CAAsC1D,KAAKE,YAAY4D"}